--- ITERATION 1 ---
--- OPTIMIZATION PROMPT ---
The kernel softmax_kernel in the source code below has a low L2 cache hit rate. Please apply block swizzling to improve L2 cache locality. Do not change the semantics of the program. I need you to rewrite the entire code so I can copy it into a python file and run it.EXTREMELY IMPORTANT - Do not include any markdown code blocks or text other than the code. DO NOT start the code with 'python'. I want you to straight directly output the code. I want to be able to copy and paste the code into a new file and run it on the testbench without any extra work.

EXTREMELY IMPORTANT - Make sure to not change the kernel function signature. Do not add any new parameters to the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function.

EXTREMELY IMPORTANT - You are NOT allowed to change ANYTHING other than remapping pid directly below this line: 'pid = tl.program_id(0)' which is always at the top of the kernel. You can ONLY remap pid to pid. Do not make any changes anywhere else in the code or you will bve rejected.

#!/usr/bin/env python

import triton
import triton.language as tl


@triton.jit
def softmax_kernel(
    output_ptr, input_ptr,
    input_row_stride, output_row_stride,
    n_cols,
    BLOCK_SIZE: tl.constexpr
):
    row_idx = tl.program_id(0)
    
    row_start_ptr = input_ptr + row_idx * input_row_stride
    
    col_offsets = tl.arange(0, BLOCK_SIZE)
    input_ptrs = row_start_ptr + col_offsets
    
    mask = col_offsets < n_cols
    row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
    
    row_minus_max = row - tl.max(row, axis=0)
    
    numerator = tl.exp(row_minus_max)
    denominator = tl.sum(numerator, axis=0)
    softmax_output = numerator / denominator
    
    output_row_start_ptr = output_ptr + row_idx * output_row_stride
    output_ptrs = output_row_start_ptr + col_offsets
    tl.store(output_ptrs, softmax_output, mask=mask) 

--- OPTIMIZATION RESPONSE (OPTIMIZED KERNEL) ---
#!/usr/bin/env python

import triton
import triton.language as tl


@triton.jit
def softmax_kernel(
    output_ptr, input_ptr,
    input_row_stride, output_row_stride,
    n_cols,
    BLOCK_SIZE: tl.constexpr
):
    pid = tl.program_id(0)
    # Apply block swizzling to improve L2 cache locality
    num_warps = tl.cdiv(n_cols, BLOCK_SIZE)
    warp_id = pid // num_warps
    lane_id = pid % num_warps
    pid = lane_id * num_warps + warp_id
    
    row_start_ptr = input_ptr + pid * input_row_stride
    
    col_offsets = tl.arange(0, BLOCK_SIZE)
    input_ptrs = row_start_ptr + col_offsets
    
    mask = col_offsets < n_cols
    row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
    
    row_minus_max = row - tl.max(row, axis=0)
    
    numerator = tl.exp(row_minus_max)
    denominator = tl.sum(numerator, axis=0)
    softmax_output = numerator / denominator
    
    output_row_start_ptr = output_ptr + pid * output_row_stride
    output_ptrs = output_row_start_ptr + col_offsets
    tl.store(output_ptrs, softmax_output, mask=mask)

--- PROFILING REPORT (ITERATION 1) ---
L2 Cache Locality Degradation: L2 cache hit rate decreased by 0.00 percentage points. Hit rate decreased from 33.4% to 33.4% (lower percentages indicate worse cache locality). Performance Loss: Experienced 1.00x slowdown with execution time increased from 1.46ms to 1.46ms (0.3% slower).

--- ITERATION 2 ---
--- OPTIMIZATION PROMPT ---
The kernel softmax_kernel in the source code below has a low L2 cache hit rate. Please apply block swizzling to improve L2 cache locality. Do not change the semantics of the program. I need you to rewrite the entire code so I can copy it into a python file and run it.EXTREMELY IMPORTANT - Do not include any markdown code blocks or text other than the code. DO NOT start the code with 'python'. I want you to straight directly output the code. I want to be able to copy and paste the code into a new file and run it on the testbench without any extra work.

EXTREMELY IMPORTANT - Make sure to not change the kernel function signature. Do not add any new parameters to the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function.

EXTREMELY IMPORTANT - You are NOT allowed to change ANYTHING other than remapping pid directly below this line: 'pid = tl.program_id(0)' which is always at the top of the kernel. You can ONLY remap pid to pid. Do not make any changes anywhere else in the code or you will bve rejected.

#!/usr/bin/env python

import triton
import triton.language as tl


@triton.jit
def softmax_kernel(
    output_ptr, input_ptr,
    input_row_stride, output_row_stride,
    n_cols,
    BLOCK_SIZE: tl.constexpr
):
    pid = tl.program_id(0)
    # Apply block swizzling to improve L2 cache locality
    num_warps = tl.cdiv(n_cols, BLOCK_SIZE)
    warp_id = pid // num_warps
    lane_id = pid % num_warps
    pid = lane_id * num_warps + warp_id
    
    row_start_ptr = input_ptr + pid * input_row_stride
    
    col_offsets = tl.arange(0, BLOCK_SIZE)
    input_ptrs = row_start_ptr + col_offsets
    
    mask = col_offsets < n_cols
    row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
    
    row_minus_max = row - tl.max(row, axis=0)
    
    numerator = tl.exp(row_minus_max)
    denominator = tl.sum(numerator, axis=0)
    softmax_output = numerator / denominator
    
    output_row_start_ptr = output_ptr + pid * output_row_stride
    output_ptrs = output_row_start_ptr + col_offsets
    tl.store(output_ptrs, softmax_output, mask=mask)

--- OPTIMIZATION RESPONSE (OPTIMIZED KERNEL) ---
#!/usr/bin/env python

import triton
import triton.language as tl


@triton.jit
def softmax_kernel(
    output_ptr, input_ptr,
    input_row_stride, output_row_stride,
    n_cols,
    BLOCK_SIZE: tl.constexpr
):
    pid = tl.program_id(0)
    # Apply block swizzling to improve L2 cache locality
    num_warps = tl.cdiv(n_cols, BLOCK_SIZE)
    warp_id = pid // num_warps
    lane_id = pid % num_warps
    pid = lane_id * num_warps + warp_id
    
    row_start_ptr = input_ptr + pid * input_row_stride
    
    col_offsets = tl.arange(0, BLOCK_SIZE)
    input_ptrs = row_start_ptr + col_offsets
    
    mask = col_offsets < n_cols
    row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
    
    row_minus_max = row - tl.max(row, axis=0)
    
    numerator = tl.exp(row_minus_max)
    denominator = tl.sum(numerator, axis=0)
    softmax_output = numerator / denominator
    
    output_row_start_ptr = output_ptr + pid * output_row_stride
    output_ptrs = output_row_start_ptr + col_offsets
    tl.store(output_ptrs, softmax_output, mask=mask)

--- PROFILING REPORT (ITERATION 2) ---
L2 Cache Locality Degradation: L2 cache hit rate decreased by 0.00 percentage points. Hit rate decreased from 33.4% to 33.4% (lower percentages indicate worse cache locality). Performance Gain: Achieved 1.00x speedup with execution time reduced from 1.46ms to 1.45ms (0.1% faster).

--- ITERATION 3 ---
--- OPTIMIZATION PROMPT ---
The kernel softmax_kernel in the source code below has a low L2 cache hit rate. Please apply block swizzling to improve L2 cache locality. Do not change the semantics of the program. I need you to rewrite the entire code so I can copy it into a python file and run it.EXTREMELY IMPORTANT - Do not include any markdown code blocks or text other than the code. DO NOT start the code with 'python'. I want you to straight directly output the code. I want to be able to copy and paste the code into a new file and run it on the testbench without any extra work.

EXTREMELY IMPORTANT - Make sure to not change the kernel function signature. Do not add any new parameters to the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function.

EXTREMELY IMPORTANT - You are NOT allowed to change ANYTHING other than remapping pid directly below this line: 'pid = tl.program_id(0)' which is always at the top of the kernel. You can ONLY remap pid to pid. Do not make any changes anywhere else in the code or you will bve rejected.

#!/usr/bin/env python

import triton
import triton.language as tl


@triton.jit
def softmax_kernel(
    output_ptr, input_ptr,
    input_row_stride, output_row_stride,
    n_cols,
    BLOCK_SIZE: tl.constexpr
):
    pid = tl.program_id(0)
    # Apply block swizzling to improve L2 cache locality
    num_warps = tl.cdiv(n_cols, BLOCK_SIZE)
    warp_id = pid // num_warps
    lane_id = pid % num_warps
    pid = lane_id * num_warps + warp_id
    
    row_start_ptr = input_ptr + pid * input_row_stride
    
    col_offsets = tl.arange(0, BLOCK_SIZE)
    input_ptrs = row_start_ptr + col_offsets
    
    mask = col_offsets < n_cols
    row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
    
    row_minus_max = row - tl.max(row, axis=0)
    
    numerator = tl.exp(row_minus_max)
    denominator = tl.sum(numerator, axis=0)
    softmax_output = numerator / denominator
    
    output_row_start_ptr = output_ptr + pid * output_row_stride
    output_ptrs = output_row_start_ptr + col_offsets
    tl.store(output_ptrs, softmax_output, mask=mask)

--- OPTIMIZATION RESPONSE (OPTIMIZED KERNEL) ---
#!/usr/bin/env python

import triton
import triton.language as tl


@triton.jit
def softmax_kernel(
    output_ptr, input_ptr,
    input_row_stride, output_row_stride,
    n_cols,
    BLOCK_SIZE: tl.constexpr
):
    pid = tl.program_id(0)
    # Apply block swizzling to improve L2 cache locality
    num_warps = tl.cdiv(n_cols, BLOCK_SIZE)
    warp_id = pid // num_warps
    lane_id = pid % num_warps
    pid = lane_id * num_warps + warp_id
    
    row_start_ptr = input_ptr + pid * input_row_stride
    
    col_offsets = tl.arange(0, BLOCK_SIZE)
    input_ptrs = row_start_ptr + col_offsets
    
    mask = col_offsets < n_cols
    row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
    
    row_minus_max = row - tl.max(row, axis=0)
    
    numerator = tl.exp(row_minus_max)
    denominator = tl.sum(numerator, axis=0)
    softmax_output = numerator / denominator
    
    output_row_start_ptr = output_ptr + pid * output_row_stride
    output_ptrs = output_row_start_ptr + col_offsets
    tl.store(output_ptrs, softmax_output, mask=mask)

--- PROFILING REPORT (ITERATION 3) ---
L2 Cache Locality Degradation: L2 cache hit rate decreased by 0.00 percentage points. Hit rate decreased from 33.4% to 33.4% (lower percentages indicate worse cache locality). Performance Loss: Experienced 1.01x slowdown with execution time increased from 1.46ms to 1.47ms (1.2% slower).

--- ITERATION 4 ---
--- OPTIMIZATION PROMPT ---
The kernel softmax_kernel in the source code below has a low L2 cache hit rate. Please apply block swizzling to improve L2 cache locality. Do not change the semantics of the program. I need you to rewrite the entire code so I can copy it into a python file and run it.EXTREMELY IMPORTANT - Do not include any markdown code blocks or text other than the code. DO NOT start the code with 'python'. I want you to straight directly output the code. I want to be able to copy and paste the code into a new file and run it on the testbench without any extra work.

EXTREMELY IMPORTANT - Make sure to not change the kernel function signature. Do not add any new parameters to the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function.

EXTREMELY IMPORTANT - You are NOT allowed to change ANYTHING other than remapping pid directly below this line: 'pid = tl.program_id(0)' which is always at the top of the kernel. You can ONLY remap pid to pid. Do not make any changes anywhere else in the code or you will bve rejected.

#!/usr/bin/env python

import triton
import triton.language as tl


@triton.jit
def softmax_kernel(
    output_ptr, input_ptr,
    input_row_stride, output_row_stride,
    n_cols,
    BLOCK_SIZE: tl.constexpr
):
    pid = tl.program_id(0)
    # Apply block swizzling to improve L2 cache locality
    num_warps = tl.cdiv(n_cols, BLOCK_SIZE)
    warp_id = pid // num_warps
    lane_id = pid % num_warps
    pid = lane_id * num_warps + warp_id
    
    row_start_ptr = input_ptr + pid * input_row_stride
    
    col_offsets = tl.arange(0, BLOCK_SIZE)
    input_ptrs = row_start_ptr + col_offsets
    
    mask = col_offsets < n_cols
    row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
    
    row_minus_max = row - tl.max(row, axis=0)
    
    numerator = tl.exp(row_minus_max)
    denominator = tl.sum(numerator, axis=0)
    softmax_output = numerator / denominator
    
    output_row_start_ptr = output_ptr + pid * output_row_stride
    output_ptrs = output_row_start_ptr + col_offsets
    tl.store(output_ptrs, softmax_output, mask=mask)

--- OPTIMIZATION RESPONSE (OPTIMIZED KERNEL) ---
#!/usr/bin/env python

import triton
import triton.language as tl


@triton.jit
def softmax_kernel(
    output_ptr, input_ptr,
    input_row_stride, output_row_stride,
    n_cols,
    BLOCK_SIZE: tl.constexpr
):
    pid = tl.program_id(0)
    # Apply block swizzling to improve L2 cache locality
    num_warps = tl.cdiv(n_cols, BLOCK_SIZE)
    warp_id = pid // num_warps
    lane_id = pid % num_warps
    pid = lane_id * num_warps + warp_id
    
    row_start_ptr = input_ptr + pid * input_row_stride
    
    col_offsets = tl.arange(0, BLOCK_SIZE)
    input_ptrs = row_start_ptr + col_offsets
    
    mask = col_offsets < n_cols
    row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
    
    row_minus_max = row - tl.max(row, axis=0)
    
    numerator = tl.exp(row_minus_max)
    denominator = tl.sum(numerator, axis=0)
    softmax_output = numerator / denominator
    
    output_row_start_ptr = output_ptr + pid * output_row_stride
    output_ptrs = output_row_start_ptr + col_offsets
    tl.store(output_ptrs, softmax_output, mask=mask)

--- PROFILING REPORT (ITERATION 4) ---
L2 Cache Locality Degradation: L2 cache hit rate decreased by 0.00 percentage points. Hit rate decreased from 33.4% to 33.4% (lower percentages indicate worse cache locality). Performance Loss: Experienced 1.01x slowdown with execution time increased from 1.46ms to 1.47ms (0.9% slower).

--- ITERATION 5 ---
--- OPTIMIZATION PROMPT ---
The kernel softmax_kernel in the source code below has a low L2 cache hit rate. Please apply block swizzling to improve L2 cache locality. Do not change the semantics of the program. I need you to rewrite the entire code so I can copy it into a python file and run it.EXTREMELY IMPORTANT - Do not include any markdown code blocks or text other than the code. DO NOT start the code with 'python'. I want you to straight directly output the code. I want to be able to copy and paste the code into a new file and run it on the testbench without any extra work.

EXTREMELY IMPORTANT - Make sure to not change the kernel function signature. Do not add any new parameters to the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function.

EXTREMELY IMPORTANT - You are NOT allowed to change ANYTHING other than remapping pid directly below this line: 'pid = tl.program_id(0)' which is always at the top of the kernel. You can ONLY remap pid to pid. Do not make any changes anywhere else in the code or you will bve rejected.

#!/usr/bin/env python

import triton
import triton.language as tl


@triton.jit
def softmax_kernel(
    output_ptr, input_ptr,
    input_row_stride, output_row_stride,
    n_cols,
    BLOCK_SIZE: tl.constexpr
):
    pid = tl.program_id(0)
    # Apply block swizzling to improve L2 cache locality
    num_warps = tl.cdiv(n_cols, BLOCK_SIZE)
    warp_id = pid // num_warps
    lane_id = pid % num_warps
    pid = lane_id * num_warps + warp_id
    
    row_start_ptr = input_ptr + pid * input_row_stride
    
    col_offsets = tl.arange(0, BLOCK_SIZE)
    input_ptrs = row_start_ptr + col_offsets
    
    mask = col_offsets < n_cols
    row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
    
    row_minus_max = row - tl.max(row, axis=0)
    
    numerator = tl.exp(row_minus_max)
    denominator = tl.sum(numerator, axis=0)
    softmax_output = numerator / denominator
    
    output_row_start_ptr = output_ptr + pid * output_row_stride
    output_ptrs = output_row_start_ptr + col_offsets
    tl.store(output_ptrs, softmax_output, mask=mask)

--- OPTIMIZATION RESPONSE (OPTIMIZED KERNEL) ---
#!/usr/bin/env python

import triton
import triton.language as tl


@triton.jit
def softmax_kernel(
    output_ptr, input_ptr,
    input_row_stride, output_row_stride,
    n_cols,
    BLOCK_SIZE: tl.constexpr
):
    pid = tl.program_id(0)
    # Apply block swizzling to improve L2 cache locality
    num_warps = tl.cdiv(n_cols, BLOCK_SIZE)
    warp_id = pid // num_warps
    lane_id = pid % num_warps
    pid = lane_id * num_warps + warp_id
    
    row_start_ptr = input_ptr + pid * input_row_stride
    
    col_offsets = tl.arange(0, BLOCK_SIZE)
    input_ptrs = row_start_ptr + col_offsets
    
    mask = col_offsets < n_cols
    row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
    
    row_minus_max = row - tl.max(row, axis=0)
    
    numerator = tl.exp(row_minus_max)
    denominator = tl.sum(numerator, axis=0)
    softmax_output = numerator / denominator
    
    output_row_start_ptr = output_ptr + pid * output_row_stride
    output_ptrs = output_row_start_ptr + col_offsets
    tl.store(output_ptrs, softmax_output, mask=mask)

