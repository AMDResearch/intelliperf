--- ITERATION 1 ---
--- OPTIMIZATION PROMPT ---
The kernel fdtd_2d_kernel in the source code below has a low L2 cache hit rate. Please apply block swizzling to improve L2 cache locality. Do not change the semantics of the program. I need you to rewrite the entire code so I can copy it into a python file and run it.EXTREMELY IMPORTANT - Do not include any markdown code blocks or text other than the code. DO NOT start the code with 'python'. I want you to straight directly output the code. I want to be able to copy and paste the code into a new file and run it on the testbench without any extra work.

EXTREMELY IMPORTANT - Make sure to not change the kernel function signature. Do not add any new parameters to the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function.

EXTREMELY IMPORTANT - You are NOT allowed to change ANYTHING other than remapping pid directly below this line: 'pid = tl.program_id(0)' which is always at the top of the kernel. You can ONLY remap pid to pid. Do not make any changes anywhere else in the code or you will bve rejected.

#!/usr/bin/env python

import triton
import triton.language as tl


@triton.jit
def fdtd_2d_kernel(
    ex_ptr, ey_ptr, hz_ptr,
    Nx, Ny,
    stride_x, stride_y,
    BLOCK_SIZE_X: tl.constexpr, BLOCK_SIZE_Y: tl.constexpr
):
    pid_x = tl.program_id(0)
    pid_y = tl.program_id(1)

    offsets_x = pid_x * BLOCK_SIZE_X + tl.arange(0, BLOCK_SIZE_X)
    offsets_y = pid_y * BLOCK_SIZE_Y + tl.arange(0, BLOCK_SIZE_Y)

    # Update H_z field
    hz_ptrs = hz_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y
    mask_hz = (offsets_x[:, None] < Nx - 1) & (offsets_y[None, :] < Ny - 1)
    
    ex_here = tl.load(ex_ptr + offsets_x[:, None] * stride_x + (offsets_y[None, :] + 1) * stride_y, mask=mask_hz)
    ex_there = tl.load(ex_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y, mask=mask_hz)
    ey_here = tl.load(ey_ptr + (offsets_x[:, None] + 1) * stride_x + offsets_y[None, :] * stride_y, mask=mask_hz)
    ey_there = tl.load(ey_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y, mask=mask_hz)
    
    hz = tl.load(hz_ptrs, mask=mask_hz)
    hz = hz - 0.5 * (ey_here - ey_there - ex_here + ex_there)
    tl.store(hz_ptrs, hz, mask=mask_hz)

    # Update E_x field
    ex_ptrs = ex_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y
    mask_ex = (offsets_x[:, None] < Nx) & (offsets_y[None, :] > 0) & (offsets_y[None, :] < Ny)
    
    hz_here = tl.load(hz_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y, mask=mask_ex)
    hz_there = tl.load(hz_ptr + offsets_x[:, None] * stride_x + (offsets_y[None, :] - 1) * stride_y, mask=mask_ex)
    
    ex = tl.load(ex_ptrs, mask=mask_ex)
    ex = ex - 0.5 * (hz_here - hz_there)
    tl.store(ex_ptrs, ex, mask=mask_ex)
    
    # Update E_y field
    ey_ptrs = ey_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y
    mask_ey = (offsets_x[:, None] > 0) & (offsets_x[:, None] < Nx) & (offsets_y[None, :] < Ny)

    hz_here = tl.load(hz_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y, mask=mask_ey)
    hz_there = tl.load(hz_ptr + (offsets_x[:, None] - 1) * stride_x + offsets_y[None, :] * stride_y, mask=mask_ey)

    ey = tl.load(ey_ptrs, mask=mask_ey)
    ey = ey + 0.5 * (hz_here - hz_there)
    tl.store(ey_ptrs, ey, mask=mask_ey) 

--- OPTIMIZATION RESPONSE (OPTIMIZED KERNEL) ---
#!/usr/bin/env python

import triton
import triton.language as tl


@triton.jit
def fdtd_2d_kernel(
    ex_ptr, ey_ptr, hz_ptr,
    Nx, Ny,
    stride_x, stride_y,
    BLOCK_SIZE_X: tl.constexpr, BLOCK_SIZE_Y: tl.constexpr
):
    pid_x = tl.program_id(0)
    pid_y = tl.program_id(1)

    # Block swizzling using Z-order curve (Morton order)
    swizzled_pid_x = (pid_x & 0x55555555) | ((pid_y & 0x55555555) << 1)
    swizzled_pid_y = ((pid_x & 0xAAAAAAAA) >> 1) | (pid_y & 0xAAAAAAAA)
    pid_x = swizzled_pid_x
    pid_y = swizzled_pid_y

    offsets_x = pid_x * BLOCK_SIZE_X + tl.arange(0, BLOCK_SIZE_X)
    offsets_y = pid_y * BLOCK_SIZE_Y + tl.arange(0, BLOCK_SIZE_Y)

    # Update H_z field
    hz_ptrs = hz_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y
    mask_hz = (offsets_x[:, None] < Nx - 1) & (offsets_y[None, :] < Ny - 1)
    
    ex_here = tl.load(ex_ptr + offsets_x[:, None] * stride_x + (offsets_y[None, :] + 1) * stride_y, mask=mask_hz)
    ex_there = tl.load(ex_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y, mask=mask_hz)
    ey_here = tl.load(ey_ptr + (offsets_x[:, None] + 1) * stride_x + offsets_y[None, :] * stride_y, mask=mask_hz)
    ey_there = tl.load(ey_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y, mask=mask_hz)
    
    hz = tl.load(hz_ptrs, mask=mask_hz)
    hz = hz - 0.5 * (ey_here - ey_there - ex_here + ex_there)
    tl.store(hz_ptrs, hz, mask=mask_hz)

    # Update E_x field
    ex_ptrs = ex_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y
    mask_ex = (offsets_x[:, None] < Nx) & (offsets_y[None, :] > 0) & (offsets_y[None, :] < Ny)
    
    hz_here = tl.load(hz_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y, mask=mask_ex)
    hz_there = tl.load(hz_ptr + offsets_x[:, None] * stride_x + (offsets_y[None, :] - 1) * stride_y, mask=mask_ex)
    
    ex = tl.load(ex_ptrs, mask=mask_ex)
    ex = ex - 0.5 * (hz_here - hz_there)
    tl.store(ex_ptrs, ex, mask=mask_ex)
    
    # Update E_y field
    ey_ptrs = ey_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y
    mask_ey = (offsets_x[:, None] > 0) & (offsets_x[:, None] < Nx) & (offsets_y[None, :] < Ny)

    hz_here = tl.load(hz_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y, mask=mask_ey)
    hz_there = tl.load(hz_ptr + (offsets_x[:, None] - 1) * stride_x + offsets_y[None, :] * stride_y, mask=mask_ey)

    ey = tl.load(ey_ptrs, mask=mask_ey)
    ey = ey + 0.5 * (hz_here - hz_there)
    tl.store(ey_ptrs, ey, mask=mask_ey)

--- ITERATION 2 ---
--- OPTIMIZATION PROMPT ---
The kernel fdtd_2d_kernel in the source code below has a low L2 cache hit rate. Please apply block swizzling to improve L2 cache locality. Do not change the semantics of the program. I need you to rewrite the entire code so I can copy it into a python file and run it.EXTREMELY IMPORTANT - Do not include any markdown code blocks or text other than the code. DO NOT start the code with 'python'. I want you to straight directly output the code. I want to be able to copy and paste the code into a new file and run it on the testbench without any extra work.

EXTREMELY IMPORTANT - Make sure to not change the kernel function signature. Do not add any new parameters to the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function.

EXTREMELY IMPORTANT - You are NOT allowed to change ANYTHING other than remapping pid directly below this line: 'pid = tl.program_id(0)' which is always at the top of the kernel. You can ONLY remap pid to pid. Do not make any changes anywhere else in the code or you will bve rejected.

#!/usr/bin/env python

import triton
import triton.language as tl


@triton.jit
def fdtd_2d_kernel(
    ex_ptr, ey_ptr, hz_ptr,
    Nx, Ny,
    stride_x, stride_y,
    BLOCK_SIZE_X: tl.constexpr, BLOCK_SIZE_Y: tl.constexpr
):
    pid_x = tl.program_id(0)
    pid_y = tl.program_id(1)

    # Block swizzling using Z-order curve (Morton order)
    swizzled_pid_x = (pid_x & 0x55555555) | ((pid_y & 0x55555555) << 1)
    swizzled_pid_y = ((pid_x & 0xAAAAAAAA) >> 1) | (pid_y & 0xAAAAAAAA)
    pid_x = swizzled_pid_x
    pid_y = swizzled_pid_y

    offsets_x = pid_x * BLOCK_SIZE_X + tl.arange(0, BLOCK_SIZE_X)
    offsets_y = pid_y * BLOCK_SIZE_Y + tl.arange(0, BLOCK_SIZE_Y)

    # Update H_z field
    hz_ptrs = hz_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y
    mask_hz = (offsets_x[:, None] < Nx - 1) & (offsets_y[None, :] < Ny - 1)
    
    ex_here = tl.load(ex_ptr + offsets_x[:, None] * stride_x + (offsets_y[None, :] + 1) * stride_y, mask=mask_hz)
    ex_there = tl.load(ex_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y, mask=mask_hz)
    ey_here = tl.load(ey_ptr + (offsets_x[:, None] + 1) * stride_x + offsets_y[None, :] * stride_y, mask=mask_hz)
    ey_there = tl.load(ey_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y, mask=mask_hz)
    
    hz = tl.load(hz_ptrs, mask=mask_hz)
    hz = hz - 0.5 * (ey_here - ey_there - ex_here + ex_there)
    tl.store(hz_ptrs, hz, mask=mask_hz)

    # Update E_x field
    ex_ptrs = ex_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y
    mask_ex = (offsets_x[:, None] < Nx) & (offsets_y[None, :] > 0) & (offsets_y[None, :] < Ny)
    
    hz_here = tl.load(hz_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y, mask=mask_ex)
    hz_there = tl.load(hz_ptr + offsets_x[:, None] * stride_x + (offsets_y[None, :] - 1) * stride_y, mask=mask_ex)
    
    ex = tl.load(ex_ptrs, mask=mask_ex)
    ex = ex - 0.5 * (hz_here - hz_there)
    tl.store(ex_ptrs, ex, mask=mask_ex)
    
    # Update E_y field
    ey_ptrs = ey_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y
    mask_ey = (offsets_x[:, None] > 0) & (offsets_x[:, None] < Nx) & (offsets_y[None, :] < Ny)

    hz_here = tl.load(hz_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y, mask=mask_ey)
    hz_there = tl.load(hz_ptr + (offsets_x[:, None] - 1) * stride_x + offsets_y[None, :] * stride_y, mask=mask_ey)

    ey = tl.load(ey_ptrs, mask=mask_ey)
    ey = ey + 0.5 * (hz_here - hz_there)
    tl.store(ey_ptrs, ey, mask=mask_ey)

--- OPTIMIZATION RESPONSE (OPTIMIZED KERNEL) ---
#!/usr/bin/env python

import triton
import triton.language as tl


@triton.jit
def fdtd_2d_kernel(
    ex_ptr, ey_ptr, hz_ptr,
    Nx, Ny,
    stride_x, stride_y,
    BLOCK_SIZE_X: tl.constexpr, BLOCK_SIZE_Y: tl.constexpr
):
    pid_x = tl.program_id(0)
    pid_y = tl.program_id(1)

    # Block swizzling using Z-order curve (Morton order) with 32-bit safe masks
    swizzled_pid_x = (pid_x & 0x55555555) | ((pid_y & 0x55555555) << 1)
    swizzled_pid_y = ((pid_x & 0xAAAAAAAA) >> 1) | (pid_y & 0xAAAAAAAA)
    pid_x = swizzled_pid_x
    pid_y = swizzled_pid_y

    offsets_x = pid_x * BLOCK_SIZE_X + tl.arange(0, BLOCK_SIZE_X)
    offsets_y = pid_y * BLOCK_SIZE_Y + tl.arange(0, BLOCK_SIZE_Y)

    # Update H_z field
    hz_ptrs = hz_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y
    mask_hz = (offsets_x[:, None] < Nx - 1) & (offsets_y[None, :] < Ny - 1)
    
    ex_here = tl.load(ex_ptr + offsets_x[:, None] * stride_x + (offsets_y[None, :] + 1) * stride_y, mask=mask_hz)
    ex_there = tl.load(ex_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y, mask=mask_hz)
    ey_here = tl.load(ey_ptr + (offsets_x[:, None] + 1) * stride_x + offsets_y[None, :] * stride_y, mask=mask_hz)
    ey_there = tl.load(ey_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y, mask=mask_hz)
    
    hz = tl.load(hz_ptrs, mask=mask_hz)
    hz = hz - 0.5 * (ey_here - ey_there - ex_here + ex_there)
    tl.store(hz_ptrs, hz, mask=mask_hz)

    # Update E_x field
    ex_ptrs = ex_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y
    mask_ex = (offsets_x[:, None] < Nx) & (offsets_y[None, :] > 0) & (offsets_y[None, :] < Ny)
    
    hz_here = tl.load(hz_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y, mask=mask_ex)
    hz_there = tl.load(hz_ptr + offsets_x[:, None] * stride_x + (offsets_y[None, :] - 1) * stride_y, mask=mask_ex)
    
    ex = tl.load(ex_ptrs, mask=mask_ex)
    ex = ex - 0.5 * (hz_here - hz_there)
    tl.store(ex_ptrs, ex, mask=mask_ex)
    
    # Update E_y field
    ey_ptrs = ey_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y
    mask_ey = (offsets_x[:, None] > 0) & (offsets_x[:, None] < Nx) & (offsets_y[None, :] < Ny)

    hz_here = tl.load(hz_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y, mask=mask_ey)
    hz_there = tl.load(hz_ptr + (offsets_x[:, None] - 1) * stride_x + offsets_y[None, :] * stride_y, mask=mask_ey)

    ey = tl.load(ey_ptrs, mask=mask_ey)
    ey = ey + 0.5 * (hz_here - hz_there)
    tl.store(ey_ptrs, ey, mask=mask_ey)

--- ITERATION 3 ---
--- OPTIMIZATION PROMPT ---
The kernel fdtd_2d_kernel in the source code below has a low L2 cache hit rate. Please apply block swizzling to improve L2 cache locality. Do not change the semantics of the program. I need you to rewrite the entire code so I can copy it into a python file and run it.EXTREMELY IMPORTANT - Do not include any markdown code blocks or text other than the code. DO NOT start the code with 'python'. I want you to straight directly output the code. I want to be able to copy and paste the code into a new file and run it on the testbench without any extra work.

EXTREMELY IMPORTANT - Make sure to not change the kernel function signature. Do not add any new parameters to the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function.

EXTREMELY IMPORTANT - You are NOT allowed to change ANYTHING other than remapping pid directly below this line: 'pid = tl.program_id(0)' which is always at the top of the kernel. You can ONLY remap pid to pid. Do not make any changes anywhere else in the code or you will bve rejected.

#!/usr/bin/env python

import triton
import triton.language as tl


@triton.jit
def fdtd_2d_kernel(
    ex_ptr, ey_ptr, hz_ptr,
    Nx, Ny,
    stride_x, stride_y,
    BLOCK_SIZE_X: tl.constexpr, BLOCK_SIZE_Y: tl.constexpr
):
    pid_x = tl.program_id(0)
    pid_y = tl.program_id(1)

    # Block swizzling using Z-order curve (Morton order) with 32-bit safe masks
    swizzled_pid_x = (pid_x & 0x55555555) | ((pid_y & 0x55555555) << 1)
    swizzled_pid_y = ((pid_x & 0xAAAAAAAA) >> 1) | (pid_y & 0xAAAAAAAA)
    pid_x = swizzled_pid_x
    pid_y = swizzled_pid_y

    offsets_x = pid_x * BLOCK_SIZE_X + tl.arange(0, BLOCK_SIZE_X)
    offsets_y = pid_y * BLOCK_SIZE_Y + tl.arange(0, BLOCK_SIZE_Y)

    # Update H_z field
    hz_ptrs = hz_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y
    mask_hz = (offsets_x[:, None] < Nx - 1) & (offsets_y[None, :] < Ny - 1)
    
    ex_here = tl.load(ex_ptr + offsets_x[:, None] * stride_x + (offsets_y[None, :] + 1) * stride_y, mask=mask_hz)
    ex_there = tl.load(ex_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y, mask=mask_hz)
    ey_here = tl.load(ey_ptr + (offsets_x[:, None] + 1) * stride_x + offsets_y[None, :] * stride_y, mask=mask_hz)
    ey_there = tl.load(ey_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y, mask=mask_hz)
    
    hz = tl.load(hz_ptrs, mask=mask_hz)
    hz = hz - 0.5 * (ey_here - ey_there - ex_here + ex_there)
    tl.store(hz_ptrs, hz, mask=mask_hz)

    # Update E_x field
    ex_ptrs = ex_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y
    mask_ex = (offsets_x[:, None] < Nx) & (offsets_y[None, :] > 0) & (offsets_y[None, :] < Ny)
    
    hz_here = tl.load(hz_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y, mask=mask_ex)
    hz_there = tl.load(hz_ptr + offsets_x[:, None] * stride_x + (offsets_y[None, :] - 1) * stride_y, mask=mask_ex)
    
    ex = tl.load(ex_ptrs, mask=mask_ex)
    ex = ex - 0.5 * (hz_here - hz_there)
    tl.store(ex_ptrs, ex, mask=mask_ex)
    
    # Update E_y field
    ey_ptrs = ey_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y
    mask_ey = (offsets_x[:, None] > 0) & (offsets_x[:, None] < Nx) & (offsets_y[None, :] < Ny)

    hz_here = tl.load(hz_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y, mask=mask_ey)
    hz_there = tl.load(hz_ptr + (offsets_x[:, None] - 1) * stride_x + offsets_y[None, :] * stride_y, mask=mask_ey)

    ey = tl.load(ey_ptrs, mask=mask_ey)
    ey = ey + 0.5 * (hz_here - hz_there)
    tl.store(ey_ptrs, ey, mask=mask_ey)

--- OPTIMIZATION RESPONSE (OPTIMIZED KERNEL) ---
#!/usr/bin/env python

import triton
import triton.language as tl


@triton.jit
def fdtd_2d_kernel(
    ex_ptr, ey_ptr, hz_ptr,
    Nx, Ny,
    stride_x, stride_y,
    BLOCK_SIZE_X: tl.constexpr, BLOCK_SIZE_Y: tl.constexpr
):
    pid_x = tl.program_id(0)
    pid_y = tl.program_id(1)

    # Block swizzling using Z-order curve (Morton order) with 16-bit safe masks
    swizzled_pid_x = (pid_x & 0x5555) | ((pid_y & 0x5555) << 1)
    swizzled_pid_y = ((pid_x & 0xAAAA) >> 1) | (pid_y & 0xAAAA)
    pid_x = swizzled_pid_x
    pid_y = swizzled_pid_y

    offsets_x = pid_x * BLOCK_SIZE_X + tl.arange(0, BLOCK_SIZE_X)
    offsets_y = pid_y * BLOCK_SIZE_Y + tl.arange(0, BLOCK_SIZE_Y)

    # Update H_z field
    hz_ptrs = hz_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y
    mask_hz = (offsets_x[:, None] < Nx - 1) & (offsets_y[None, :] < Ny - 1)
    
    ex_here = tl.load(ex_ptr + offsets_x[:, None] * stride_x + (offsets_y[None, :] + 1) * stride_y, mask=mask_hz)
    ex_there = tl.load(ex_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y, mask=mask_hz)
    ey_here = tl.load(ey_ptr + (offsets_x[:, None] + 1) * stride_x + offsets_y[None, :] * stride_y, mask=mask_hz)
    ey_there = tl.load(ey_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y, mask=mask_hz)
    
    hz = tl.load(hz_ptrs, mask=mask_hz)
    hz = hz - 0.5 * (ey_here - ey_there - ex_here + ex_there)
    tl.store(hz_ptrs, hz, mask=mask_hz)

    # Update E_x field
    ex_ptrs = ex_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y
    mask_ex = (offsets_x[:, None] < Nx) & (offsets_y[None, :] > 0) & (offsets_y[None, :] < Ny)
    
    hz_here = tl.load(hz_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y, mask=mask_ex)
    hz_there = tl.load(hz_ptr + offsets_x[:, None] * stride_x + (offsets_y[None, :] - 1) * stride_y, mask=mask_ex)
    
    ex = tl.load(ex_ptrs, mask=mask_ex)
    ex = ex - 0.5 * (hz_here - hz_there)
    tl.store(ex_ptrs, ex, mask=mask_ex)
    
    # Update E_y field
    ey_ptrs = ey_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y
    mask_ey = (offsets_x[:, None] > 0) & (offsets_x[:, None] < Nx) & (offsets_y[None, :] < Ny)

    hz_here = tl.load(hz_ptr + offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y, mask=mask_ey)
    hz_there = tl.load(hz_ptr + (offsets_x[:, None] - 1) * stride_x + offsets_y[None, :] * stride_y, mask=mask_ey)

    ey = tl.load(ey_ptrs, mask=mask_ey)
    ey = ey + 0.5 * (hz_here - hz_there)
    tl.store(ey_ptrs, ey, mask=mask_ey)

