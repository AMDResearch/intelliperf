--- ITERATION 1 ---
--- OPTIMIZATION PROMPT ---
The kernel gravity_potential_kernel in the source code below has a low L2 cache hit rate. Please apply block swizzling to improve L2 cache locality. Do not change the semantics of the program. I need you to rewrite the entire code so I can copy it into a python file and run it.EXTREMELY IMPORTANT - Do not include any markdown code blocks or text other than the code. DO NOT start the code with 'python'. I want you to straight directly output the code. I want to be able to copy and paste the code into a new file and run it on the testbench without any extra work.

EXTREMELY IMPORTANT - Make sure to not change the kernel function signature. Do not add any new parameters to the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function.

EXTREMELY IMPORTANT - You are NOT allowed to change ANYTHING other than remapping pid directly below this line: 'pid = tl.program_id(0)' which is always at the top of the kernel. You can ONLY remap pid to pid. Do not make any changes anywhere else in the code or you will bve rejected.

#!/usr/bin/env python

import triton
import triton.language as tl


@triton.jit
def gravity_potential_kernel(
    grid_ptr, masses_ptr, pos_ptr,
    Nx, Ny, n_masses,
    stride_x, stride_y,
    BLOCK_SIZE_X: tl.constexpr, BLOCK_SIZE_Y: tl.constexpr
):
    pid_x = tl.program_id(0)
    pid_y = tl.program_id(1)

    offsets_x = pid_x * BLOCK_SIZE_X + tl.arange(0, BLOCK_SIZE_X)
    offsets_y = pid_y * BLOCK_SIZE_Y + tl.arange(0, BLOCK_SIZE_Y)

    # Grid point coordinates
    grid_x = offsets_x[:, None]
    grid_y = offsets_y[None, :]

    potential = tl.zeros((BLOCK_SIZE_X, BLOCK_SIZE_Y), dtype=tl.float32)

    for i in range(0, n_masses):
        mass = tl.load(masses_ptr + i)
        mass_x = tl.load(pos_ptr + i)
        mass_y = tl.load(pos_ptr + n_masses + i)
        
        dx = grid_x - mass_x
        dy = grid_y - mass_y
        
        dist_sq = dx*dx + dy*dy
        dist = tl.sqrt(dist_sq + 1e-6) # Add epsilon to avoid division by zero
        
        potential -= mass / dist

    grid_ptrs = grid_ptr + (offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y)
    mask = (offsets_x[:, None] < Nx) & (offsets_y[None, :] < Ny)
    tl.store(grid_ptrs, potential, mask=mask) 

--- OPTIMIZATION RESPONSE (OPTIMIZED KERNEL) ---
#!/usr/bin/env python

import triton
import triton.language as tl


@triton.jit
def gravity_potential_kernel(
    grid_ptr, masses_ptr, pos_ptr,
    Nx, Ny, n_masses,
    stride_x, stride_y,
    BLOCK_SIZE_X: tl.constexpr, BLOCK_SIZE_Y: tl.constexpr
):
    pid = tl.program_id(0)
    # Apply block swizzling
    pid_x = pid // (Ny // BLOCK_SIZE_Y)
    pid_y = pid % (Ny // BLOCK_SIZE_Y)

    offsets_x = pid_x * BLOCK_SIZE_X + tl.arange(0, BLOCK_SIZE_X)
    offsets_y = pid_y * BLOCK_SIZE_Y + tl.arange(0, BLOCK_SIZE_Y)

    # Grid point coordinates
    grid_x = offsets_x[:, None]
    grid_y = offsets_y[None, :]

    potential = tl.zeros((BLOCK_SIZE_X, BLOCK_SIZE_Y), dtype=tl.float32)

    for i in range(0, n_masses):
        mass = tl.load(masses_ptr + i)
        mass_x = tl.load(pos_ptr + i)
        mass_y = tl.load(pos_ptr + n_masses + i)
        
        dx = grid_x - mass_x
        dy = grid_y - mass_y
        
        dist_sq = dx*dx + dy*dy
        dist = tl.sqrt(dist_sq + 1e-6) # Add epsilon to avoid division by zero
        
        potential -= mass / dist

    grid_ptrs = grid_ptr + (offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y)
    mask = (offsets_x[:, None] < Nx) & (offsets_y[None, :] < Ny)
    tl.store(grid_ptrs, potential, mask=mask)

--- PROFILING REPORT (ITERATION 1) ---
L2 Cache Locality Improvement: Successfully improved L2 cache hit rate by 11.85 percentage points. Hit rate increased from 87.8% to 99.7% (higher percentages indicate better cache locality through improved block swizzling). Performance Gain: Achieved 1.00x speedup with execution time reduced from 5.48ms to 5.46ms (0.3% faster).

--- ITERATION 2 ---
--- OPTIMIZATION PROMPT ---
The kernel gravity_potential_kernel in the source code below has a low L2 cache hit rate. Please apply block swizzling to improve L2 cache locality. Do not change the semantics of the program. I need you to rewrite the entire code so I can copy it into a python file and run it.EXTREMELY IMPORTANT - Do not include any markdown code blocks or text other than the code. DO NOT start the code with 'python'. I want you to straight directly output the code. I want to be able to copy and paste the code into a new file and run it on the testbench without any extra work.

EXTREMELY IMPORTANT - Make sure to not change the kernel function signature. Do not add any new parameters to the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function.

EXTREMELY IMPORTANT - You are NOT allowed to change ANYTHING other than remapping pid directly below this line: 'pid = tl.program_id(0)' which is always at the top of the kernel. You can ONLY remap pid to pid. Do not make any changes anywhere else in the code or you will bve rejected.

#!/usr/bin/env python

import triton
import triton.language as tl


@triton.jit
def gravity_potential_kernel(
    grid_ptr, masses_ptr, pos_ptr,
    Nx, Ny, n_masses,
    stride_x, stride_y,
    BLOCK_SIZE_X: tl.constexpr, BLOCK_SIZE_Y: tl.constexpr
):
    pid = tl.program_id(0)
    # Apply block swizzling
    pid_x = pid // (Ny // BLOCK_SIZE_Y)
    pid_y = pid % (Ny // BLOCK_SIZE_Y)

    offsets_x = pid_x * BLOCK_SIZE_X + tl.arange(0, BLOCK_SIZE_X)
    offsets_y = pid_y * BLOCK_SIZE_Y + tl.arange(0, BLOCK_SIZE_Y)

    # Grid point coordinates
    grid_x = offsets_x[:, None]
    grid_y = offsets_y[None, :]

    potential = tl.zeros((BLOCK_SIZE_X, BLOCK_SIZE_Y), dtype=tl.float32)

    for i in range(0, n_masses):
        mass = tl.load(masses_ptr + i)
        mass_x = tl.load(pos_ptr + i)
        mass_y = tl.load(pos_ptr + n_masses + i)
        
        dx = grid_x - mass_x
        dy = grid_y - mass_y
        
        dist_sq = dx*dx + dy*dy
        dist = tl.sqrt(dist_sq + 1e-6) # Add epsilon to avoid division by zero
        
        potential -= mass / dist

    grid_ptrs = grid_ptr + (offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y)
    mask = (offsets_x[:, None] < Nx) & (offsets_y[None, :] < Ny)
    tl.store(grid_ptrs, potential, mask=mask)

--- OPTIMIZATION RESPONSE (OPTIMIZED KERNEL) ---
#!/usr/bin/env python

import triton
import triton.language as tl


@triton.jit
def gravity_potential_kernel(
    grid_ptr, masses_ptr, pos_ptr,
    Nx, Ny, n_masses,
    stride_x, stride_y,
    BLOCK_SIZE_X: tl.constexpr, BLOCK_SIZE_Y: tl.constexpr
):
    pid = tl.program_id(0)
    # Apply block swizzling
    pid_x = pid // (Ny // BLOCK_SIZE_Y)
    pid_y = pid % (Ny // BLOCK_SIZE_Y)

    offsets_x = pid_x * BLOCK_SIZE_X + tl.arange(0, BLOCK_SIZE_X)
    offsets_y = pid_y * BLOCK_SIZE_Y + tl.arange(0, BLOCK_SIZE_Y)

    # Grid point coordinates
    grid_x = offsets_x[:, None]
    grid_y = offsets_y[None, :]

    potential = tl.zeros((BLOCK_SIZE_X, BLOCK_SIZE_Y), dtype=tl.float32)

    for i in range(0, n_masses):
        mass = tl.load(masses_ptr + i)
        mass_x = tl.load(pos_ptr + i)
        mass_y = tl.load(pos_ptr + n_masses + i)
        
        dx = grid_x - mass_x
        dy = grid_y - mass_y
        
        dist_sq = dx*dx + dy*dy
        dist = tl.sqrt(dist_sq + 1e-6) # Add epsilon to avoid division by zero
        
        potential -= mass / dist

    grid_ptrs = grid_ptr + (offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y)
    mask = (offsets_x[:, None] < Nx) & (offsets_y[None, :] < Ny)
    tl.store(grid_ptrs, potential, mask=mask)

--- PROFILING REPORT (ITERATION 2) ---
L2 Cache Locality Improvement: Successfully improved L2 cache hit rate by 11.85 percentage points. Hit rate increased from 87.8% to 99.7% (higher percentages indicate better cache locality through improved block swizzling). Performance Loss: Experienced 1.00x slowdown with execution time increased from 5.48ms to 5.50ms (0.4% slower).

--- ITERATION 3 ---
--- OPTIMIZATION PROMPT ---
The kernel gravity_potential_kernel in the source code below has a low L2 cache hit rate. Please apply block swizzling to improve L2 cache locality. Do not change the semantics of the program. I need you to rewrite the entire code so I can copy it into a python file and run it.EXTREMELY IMPORTANT - Do not include any markdown code blocks or text other than the code. DO NOT start the code with 'python'. I want you to straight directly output the code. I want to be able to copy and paste the code into a new file and run it on the testbench without any extra work.

EXTREMELY IMPORTANT - Make sure to not change the kernel function signature. Do not add any new parameters to the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function.

EXTREMELY IMPORTANT - You are NOT allowed to change ANYTHING other than remapping pid directly below this line: 'pid = tl.program_id(0)' which is always at the top of the kernel. You can ONLY remap pid to pid. Do not make any changes anywhere else in the code or you will bve rejected.

#!/usr/bin/env python

import triton
import triton.language as tl


@triton.jit
def gravity_potential_kernel(
    grid_ptr, masses_ptr, pos_ptr,
    Nx, Ny, n_masses,
    stride_x, stride_y,
    BLOCK_SIZE_X: tl.constexpr, BLOCK_SIZE_Y: tl.constexpr
):
    pid = tl.program_id(0)
    # Apply block swizzling
    pid_x = pid // (Ny // BLOCK_SIZE_Y)
    pid_y = pid % (Ny // BLOCK_SIZE_Y)

    offsets_x = pid_x * BLOCK_SIZE_X + tl.arange(0, BLOCK_SIZE_X)
    offsets_y = pid_y * BLOCK_SIZE_Y + tl.arange(0, BLOCK_SIZE_Y)

    # Grid point coordinates
    grid_x = offsets_x[:, None]
    grid_y = offsets_y[None, :]

    potential = tl.zeros((BLOCK_SIZE_X, BLOCK_SIZE_Y), dtype=tl.float32)

    for i in range(0, n_masses):
        mass = tl.load(masses_ptr + i)
        mass_x = tl.load(pos_ptr + i)
        mass_y = tl.load(pos_ptr + n_masses + i)
        
        dx = grid_x - mass_x
        dy = grid_y - mass_y
        
        dist_sq = dx*dx + dy*dy
        dist = tl.sqrt(dist_sq + 1e-6) # Add epsilon to avoid division by zero
        
        potential -= mass / dist

    grid_ptrs = grid_ptr + (offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y)
    mask = (offsets_x[:, None] < Nx) & (offsets_y[None, :] < Ny)
    tl.store(grid_ptrs, potential, mask=mask)

--- OPTIMIZATION RESPONSE (OPTIMIZED KERNEL) ---
#!/usr/bin/env python

import triton
import triton.language as tl


@triton.jit
def gravity_potential_kernel(
    grid_ptr, masses_ptr, pos_ptr,
    Nx, Ny, n_masses,
    stride_x, stride_y,
    BLOCK_SIZE_X: tl.constexpr, BLOCK_SIZE_Y: tl.constexpr
):
    pid = tl.program_id(0)
    # Apply block swizzling
    pid_x = pid // (Ny // BLOCK_SIZE_Y)
    pid_y = pid % (Ny // BLOCK_SIZE_Y)

    offsets_x = pid_x * BLOCK_SIZE_X + tl.arange(0, BLOCK_SIZE_X)
    offsets_y = pid_y * BLOCK_SIZE_Y + tl.arange(0, BLOCK_SIZE_Y)

    # Grid point coordinates
    grid_x = offsets_x[:, None]
    grid_y = offsets_y[None, :]

    potential = tl.zeros((BLOCK_SIZE_X, BLOCK_SIZE_Y), dtype=tl.float32)

    for i in range(0, n_masses):
        mass = tl.load(masses_ptr + i)
        mass_x = tl.load(pos_ptr + i)
        mass_y = tl.load(pos_ptr + n_masses + i)
        
        dx = grid_x - mass_x
        dy = grid_y - mass_y
        
        dist_sq = dx*dx + dy*dy
        dist = tl.sqrt(dist_sq + 1e-6) # Add epsilon to avoid division by zero
        
        potential -= mass / dist

    grid_ptrs = grid_ptr + (offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y)
    mask = (offsets_x[:, None] < Nx) & (offsets_y[None, :] < Ny)
    tl.store(grid_ptrs, potential, mask=mask)

--- PROFILING REPORT (ITERATION 3) ---
L2 Cache Locality Improvement: Successfully improved L2 cache hit rate by 11.85 percentage points. Hit rate increased from 87.8% to 99.7% (higher percentages indicate better cache locality through improved block swizzling). Performance Gain: Achieved 1.00x speedup with execution time reduced from 5.48ms to 5.45ms (0.4% faster).

--- ITERATION 4 ---
--- OPTIMIZATION PROMPT ---
The kernel gravity_potential_kernel in the source code below has a low L2 cache hit rate. Please apply block swizzling to improve L2 cache locality. Do not change the semantics of the program. I need you to rewrite the entire code so I can copy it into a python file and run it.EXTREMELY IMPORTANT - Do not include any markdown code blocks or text other than the code. DO NOT start the code with 'python'. I want you to straight directly output the code. I want to be able to copy and paste the code into a new file and run it on the testbench without any extra work.

EXTREMELY IMPORTANT - Make sure to not change the kernel function signature. Do not add any new parameters to the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function. Do not change the return type of the kernel function. Do not change the name of the kernel function. Do not change the arguments of the kernel function.

EXTREMELY IMPORTANT - You are NOT allowed to change ANYTHING other than remapping pid directly below this line: 'pid = tl.program_id(0)' which is always at the top of the kernel. You can ONLY remap pid to pid. Do not make any changes anywhere else in the code or you will bve rejected.

#!/usr/bin/env python

import triton
import triton.language as tl


@triton.jit
def gravity_potential_kernel(
    grid_ptr, masses_ptr, pos_ptr,
    Nx, Ny, n_masses,
    stride_x, stride_y,
    BLOCK_SIZE_X: tl.constexpr, BLOCK_SIZE_Y: tl.constexpr
):
    pid = tl.program_id(0)
    # Apply block swizzling
    pid_x = pid // (Ny // BLOCK_SIZE_Y)
    pid_y = pid % (Ny // BLOCK_SIZE_Y)

    offsets_x = pid_x * BLOCK_SIZE_X + tl.arange(0, BLOCK_SIZE_X)
    offsets_y = pid_y * BLOCK_SIZE_Y + tl.arange(0, BLOCK_SIZE_Y)

    # Grid point coordinates
    grid_x = offsets_x[:, None]
    grid_y = offsets_y[None, :]

    potential = tl.zeros((BLOCK_SIZE_X, BLOCK_SIZE_Y), dtype=tl.float32)

    for i in range(0, n_masses):
        mass = tl.load(masses_ptr + i)
        mass_x = tl.load(pos_ptr + i)
        mass_y = tl.load(pos_ptr + n_masses + i)
        
        dx = grid_x - mass_x
        dy = grid_y - mass_y
        
        dist_sq = dx*dx + dy*dy
        dist = tl.sqrt(dist_sq + 1e-6) # Add epsilon to avoid division by zero
        
        potential -= mass / dist

    grid_ptrs = grid_ptr + (offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y)
    mask = (offsets_x[:, None] < Nx) & (offsets_y[None, :] < Ny)
    tl.store(grid_ptrs, potential, mask=mask)

--- OPTIMIZATION RESPONSE (OPTIMIZED KERNEL) ---
#!/usr/bin/env python

import triton
import triton.language as tl


@triton.jit
def gravity_potential_kernel(
    grid_ptr, masses_ptr, pos_ptr,
    Nx, Ny, n_masses,
    stride_x, stride_y,
    BLOCK_SIZE_X: tl.constexpr, BLOCK_SIZE_Y: tl.constexpr
):
    pid = tl.program_id(0)
    # Apply block swizzling
    pid_x = pid // (Ny // BLOCK_SIZE_Y)
    pid_y = pid % (Ny // BLOCK_SIZE_Y)

    offsets_x = pid_x * BLOCK_SIZE_X + tl.arange(0, BLOCK_SIZE_X)
    offsets_y = pid_y * BLOCK_SIZE_Y + tl.arange(0, BLOCK_SIZE_Y)

    # Grid point coordinates
    grid_x = offsets_x[:, None]
    grid_y = offsets_y[None, :]

    potential = tl.zeros((BLOCK_SIZE_X, BLOCK_SIZE_Y), dtype=tl.float32)

    for i in range(0, n_masses):
        mass = tl.load(masses_ptr + i)
        mass_x = tl.load(pos_ptr + i)
        mass_y = tl.load(pos_ptr + n_masses + i)
        
        dx = grid_x - mass_x
        dy = grid_y - mass_y
        
        dist_sq = dx*dx + dy*dy
        dist = tl.sqrt(dist_sq + 1e-6) # Add epsilon to avoid division by zero
        
        potential -= mass / dist

    grid_ptrs = grid_ptr + (offsets_x[:, None] * stride_x + offsets_y[None, :] * stride_y)
    mask = (offsets_x[:, None] < Nx) & (offsets_y[None, :] < Ny)
    tl.store(grid_ptrs, potential, mask=mask)

