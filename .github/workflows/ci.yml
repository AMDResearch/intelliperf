name: IntelliPerf Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  detect-container-runtime:
    runs-on: [self-hosted]
    timeout-minutes: 10
    outputs:
      runtime: ${{ steps.detect.outputs.runtime }}
    
    steps:
      - name: Detect available container runtime
        id: detect
        run: |
          if command -v docker &> /dev/null; then
            echo "Docker found"
            echo "runtime=docker" >> $GITHUB_OUTPUT
          elif command -v apptainer &> /dev/null; then
            echo "Apptainer found"
            echo "runtime=apptainer" >> $GITHUB_OUTPUT
          else
            echo "No container runtime found, will install Apptainer"
            echo "runtime=apptainer" >> $GITHUB_OUTPUT
          fi

  build-apptainer-image:
    needs: detect-container-runtime
    if: needs.detect-container-runtime.outputs.runtime == 'apptainer'
    runs-on: [self-hosted]
    timeout-minutes: 90

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Apptainer
        run: |
          if ! command -v apptainer &> /dev/null; then
            apt-get update && apt-get install -y software-properties-common
            echo "deb [trusted=yes] https://ppa.launchpadcontent.net/apptainer/ppa/ubuntu $(lsb_release -cs) main" \
              | tee /etc/apt/sources.list.d/apptainer.list
            apt-get update && apt-get install -y apptainer
          fi

      - name: Build IntelliPerf Apptainer container
        run: |
          # Create persistent Apptainer directory
          mkdir -p ~/apptainer

          # Build Apptainer image from definition file (only if it doesn't exist)
          if [ ! -f ~/apptainer/intelliperf-dev.sif ]; then
            echo "Building new Apptainer image..."
            ./apptainer/build.sh --output ~/apptainer/intelliperf-dev.sif
          else
            echo "Using existing Apptainer image"
          fi

  build-docker-image:
    needs: detect-container-runtime
    if: needs.detect-container-runtime.outputs.runtime == 'docker'
    runs-on: [self-hosted]
    timeout-minutes: 90

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build IntelliPerf Docker container
        run: |
          # Build Docker image
          echo "Building Docker image..."
          ./docker/build.sh

  run-tests:
    name: IntelliPerf Test
    needs: [detect-container-runtime, build-apptainer-image, build-docker-image]
    if: |
      always() &&
      (needs.build-apptainer-image.result == 'success' || needs.build-docker-image.result == 'success' || needs.build-apptainer-image.result == 'skipped' || needs.build-docker-image.result == 'skipped')
    runs-on: [self-hosted]
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run IntelliPerf Tests (Apptainer)
        if: needs.detect-container-runtime.outputs.runtime == 'apptainer'
        env:
          LLM_GATEWAY_KEY: ${{ secrets.LLM_GATEWAY_KEY }}
        run: |
          apptainer exec ~/apptainer/intelliperf-dev.sif bash -c "
            set -e  # Exit on any error

            # Set environment variables
            export LLM_GATEWAY_KEY='${{ secrets.LLM_GATEWAY_KEY }}'
            export ROCM_PATH=/opt/rocm
            export PATH=\$ROCM_PATH/bin:\$PATH
            export LD_LIBRARY_PATH=\$ROCM_PATH/lib:\$LD_LIBRARY_PATH

            # Install IntelliPerf (PyTorch ROCm and tools are already installed in container)
            pip install -e .
            python3 scripts/install_tool.py --all

            # IntelliPerf is installed at /root/.local/bin
            export PATH=\$PATH:/root/.local/bin

            # Create results directory
            mkdir -p ~/intelliperf_results

            # Run the IntelliPerf examples
            ./.github/workflows/scripts/ci_tests.sh
          "

      - name: Run IntelliPerf Tests (Docker)
        if: needs.detect-container-runtime.outputs.runtime == 'docker'
        env:
          LLM_GATEWAY_KEY: ${{ secrets.LLM_GATEWAY_KEY }}
        run: |
          # Copy repository into a temporary directory for Docker
          mkdir -p /tmp/intelliperf_ci
          rsync -av --exclude='.git' ./ /tmp/intelliperf_ci/

          # Run tests in Docker container
          docker run --rm \
            --device=/dev/kfd --device=/dev/dri --group-add video \
            -v /tmp/intelliperf_ci:/intelliperf \
            -v $HOME/intelliperf_results:/root/intelliperf_results \
            -e LLM_GATEWAY_KEY="${{ secrets.LLM_GATEWAY_KEY }}" \
            intelliperf bash -c "
              set -e  # Exit on any error

              # Activate conda environment if available
              if [ -f /opt/conda/bin/activate ]; then
                source /opt/conda/bin/activate py_3.10
              fi

              # Set environment variables
              export ROCM_PATH=/opt/rocm
              export PATH=\$ROCM_PATH/bin:\$PATH
              export LD_LIBRARY_PATH=\$ROCM_PATH/lib:\$LD_LIBRARY_PATH

              # Install IntelliPerf
              pip install -e .
              python3 scripts/install_tool.py --all

              # IntelliPerf is installed at /root/.local/bin
              export PATH=\$PATH:/root/.local/bin

              # Create results directory
              mkdir -p ~/intelliperf_results

              # Run the IntelliPerf examples
              ./.github/workflows/scripts/ci_tests.sh
            "

      - name: Check test results
        run: |
          ./.github/workflows/scripts/check_test_results.sh

      - name: Upload test outputs as artifact
        if: always()
        run: |
          echo "ðŸ“¥ Collecting test outputs..."
          mkdir -p test_outputs
          
          # Copy test results from container to local directory
          cp -r ~/intelliperf_results/ ./test_outputs/ || echo "No results directory found"
          
          # Create tar artifact
          tar -czf intelliperf_test_outputs.tar.gz -C test_outputs .
          echo "âœ… Test outputs archived as intelliperf_test_outputs.tar.gz"

      - name: Upload artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: intelliperf-test-outputs
          path: intelliperf_test_outputs.tar.gz
          retention-days: 15

