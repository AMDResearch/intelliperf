name: IntelliPerf Tests with Apptainer

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  build-apptainer-image:
    runs-on: [self-hosted]
    timeout-minutes: 90

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Apptainer
        run: |
          apt-get update && apt-get install -y software-properties-common
          add-apt-repository -y ppa:apptainer/ppa
          apt-get update && apt-get install -y apptainer

      - name: Build IntelliPerf Apptainer container
        run: |
          # Create persistent Apptainer directory
          mkdir -p ~/apptainer

          # Build Apptainer image from definition file (only if it doesn't exist)
          if [ ! -f ~/apptainer/intelliperf-dev.sif ]; then
            echo "Building new Apptainer image..."
            ./apptainer/build.sh --output ~/apptainer/intelliperf-dev.sif
          else
            echo "Using existing Apptainer image"
          fi
  run-tests:
    name: IntelliPerf Test
    needs: build-apptainer-image
    runs-on: [self-hosted]
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run IntelliPerf Tests
        env:
          LLM_GATEWAY_KEY: ${{ secrets.LLM_GATEWAY_KEY }}
        run: |
          apptainer exec ~/apptainer/intelliperf-dev.sif bash -c "
            set -e  # Exit on any error

            # Set environment variables
            export LLM_GATEWAY_KEY='${{ secrets.LLM_GATEWAY_KEY }}'
            export ROCM_PATH=/opt/rocm
            export PATH=\$ROCM_PATH/bin:\$PATH
            export LD_LIBRARY_PATH=\$ROCM_PATH/lib:\$LD_LIBRARY_PATH

            # Install IntelliPerf (PyTorch ROCm and tools are already installed in container)
            pip install -e .

            # Create results directory
            mkdir -p /intelliperf_results

            # Run the IntelliPerf examples
            ./.github/workflows/scripts/ci_tests.sh
          "

      - name: Download test outputs
        if: always()
        run: |
          echo "üì• Downloading test outputs..."
          mkdir -p test_outputs
          scp -r -o StrictHostKeyChecking=no root@localhost:/intelliperf_results/ ./test_outputs/ || echo "No results directory found"
          
          # Create tar artifact
          tar -czf intelliperf_test_outputs.tar.gz -C test_outputs .
          echo "‚úÖ Test outputs archived as intelliperf_test_outputs.tar.gz"
          
          # Print test results summary with GitHub Actions annotations
          echo "üìä IntelliPerf Test Results Summary:"
          
          # Check each test result by parsing the success field
          check_test_result() {
            local file="$1"
            local test_name="$2"
            if [ -f "$file" ]; then
              if jq -e '.success == true' "$file" >/dev/null 2>&1; then
                echo "::notice::‚úÖ $test_name: PASSED"
                return 0
              else
                echo "::warning::‚ùå $test_name: FAILED"
                return 1
              fi
            else
              echo "::warning::‚ùå $test_name: FAILED (file not found)"
              return 1
            fi
          }
          
          # Track overall success
          overall_success=true
          
          check_test_result "./test_outputs/intelliperf_results/memory_access_output.json" "Memory Access" || overall_success=false
          check_test_result "./test_outputs/intelliperf_results/bank_conflict_output.json" "Bank Conflict" || overall_success=false
          check_test_result "./test_outputs/intelliperf_results/atomic_contention_output.json" "Atomic Contention" || overall_success=false
          check_test_result "./test_outputs/intelliperf_results/diagnose_only_hip_uncoalesced.json" "Diagnose Only (HIP)" || overall_success=false
          check_test_result "./test_outputs/intelliperf_results/diagnose_only_torch_add.json" "Diagnose Only (Torch)" || overall_success=false
          check_test_result "./test_outputs/intelliperf_results/diagnose_only_triton_reduce.json" "Diagnose Only (Triton)" || overall_success=false
          
          echo ""
          if [ "$overall_success" = true ]; then
            echo "::notice::üéØ All IntelliPerf tests PASSED! ‚úÖ"
          else
            echo "::warning::‚ö†Ô∏è Some IntelliPerf tests FAILED! ‚ùå"
          fi

      - name: Upload test outputs as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: intelliperf-test-outputs
          path: intelliperf_test_outputs.tar.gz
          retention-days: 15
