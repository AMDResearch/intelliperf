name: IntelliPerf CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-intelliperf:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DEV_CLOUD_KEY }}

    - name: Install jq
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Create Droplet
      id: create
      run: |
        DROPLET_NAME="intelliperf-$(date +%s)"
        
        # Create droplet and capture JSON output
        DROPLET_JSON=$(doctl compute droplet create \
          --image 188571990 \
          --size gpu-mi300x1-192gb \
          --region atl1 \
          --ssh-keys ${{ secrets.SSH_KEY_ID }} \
          "$DROPLET_NAME" \
          -o json \
          --wait)
        
        # Check if droplet creation was successful
        if [ $? -ne 0 ]; then
          echo "‚ùå Failed to create droplet"
          exit 1
        fi
        
        # Extract droplet ID and IP
        DROPLET_ID=$(echo "$DROPLET_JSON" | jq -r '.[0].id')
        PUBLIC_IP=$(echo "$DROPLET_JSON" | jq -r '.[0].networks.v4[] | select(.type=="public") | .ip_address')
        
        # Set outputs for other steps
        echo "droplet_id=$DROPLET_ID" >> $GITHUB_OUTPUT
        echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
        
        echo "‚úÖ Droplet created successfully!"

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ steps.create.outputs.public_ip }} >> ~/.ssh/known_hosts 2>/dev/null || true

    - name: Wait for SSH to be ready
      run: |
        echo "‚è≥ Waiting for SSH to be ready..."
        for i in {1..30}; do
          if ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@${{ steps.create.outputs.public_ip }} "echo 'SSH ready'" 2>/dev/null; then
            echo "‚úÖ SSH is ready!"
            break
          fi
          echo "Attempt $i/30: SSH not ready yet, waiting 10 seconds..."
          sleep 10
        done

    - name: Determine commit hash
      id: commit_hash
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "commit_hash=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
        else
          echo "commit_hash=${{ github.sha }}" >> $GITHUB_OUTPUT
        fi

    - name: Install IntelliPerf
      run: |
        echo "üöÄIntelliPerf installation..."
        
        # Setup SSH, clone repo, and install dependencies
        ssh -o StrictHostKeyChecking=no root@${{ steps.create.outputs.public_ip }} "
          set -e
          
          # Remove any stale dpkg locks
          sudo rm -f /var/lib/apt/lists/lock
          sudo rm -f /var/cache/apt/archives/lock
          sudo rm -f /var/lib/dpkg/lock*
          
          # Setup SSH key for git access
          mkdir -p ~/.ssh
          echo '${{ secrets.SSH_PRIVATE_KEY }}' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts
          
          # Set environment variables
          export LLM_GATEWAY_KEY='${{ secrets.LLM_GATEWAY_KEY }}'
          export ROCM_PATH=/opt/rocm
          export PATH=\$ROCM_PATH/bin:\$PATH
          export LD_LIBRARY_PATH=\$ROCM_PATH/lib:\$LD_LIBRARY_PATH
          
          # Install system dependencies
          sudo apt-get update
          sudo apt-get install -y python3-venv rocm-llvm-dev libzstd-dev libdwarf-dev locales git cmake
          sudo locale-gen en_US.UTF-8
          
          # Clone the repository
          git clone git@github.com:AMDResearch/intelliperf.git
          cd intelliperf
          echo 'Checking out commit ${{ steps.commit_hash.outputs.commit_hash }}'
          git checkout ${{ steps.commit_hash.outputs.commit_hash }}
          
          # Setup Python environment
          python3 -m venv intelliperf_env
          source intelliperf_env/bin/activate
          pip install --upgrade pip
          pip install -e .
          pip3 install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/rocm6.4
          python3 scripts/install_tool.py --all
          
          # Verify installation
          rocminfo
          pip list | grep intelliperf || echo 'IntelliPerf not found in pip list'
          
          # Run the IntelliPerf examples
          ./.github/workflows/scripts/ci_tests.sh
        "

    - name: Auto-destroy droplet after use
      if: always()
      run: |
        echo "üóëÔ∏è Auto-destroying droplet ${{ steps.create.outputs.droplet_id }}..."
        doctl compute droplet delete ${{ steps.create.outputs.droplet_id }} --force
        echo "‚úÖ Droplet auto-destroyed successfully!"
