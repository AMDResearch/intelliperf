#!/usr/bin/env python3
################################################################################
# MIT License

# Copyright (c) 2025 Advanced Micro Devices, Inc. All Rights Reserved.

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
################################################################################


import sys
import argparse
import logging
import json
from datetime import datetime
from formulas.bank_conflict import bank_conflict
from formulas.diagnose_only import diagnose_only
from formulas.memory_access import memory_access
from formulas.atomic_contention import atomic_contention
from tabulate import tabulate

def maestro_parser():
    parser = argparse.ArgumentParser(
        description='Optimize and analyze the given application based on available Maestro formulas.',
        prog="tool",
        formatter_class=lambda prog: argparse.RawTextHelpFormatter(
            prog, max_help_position=30
        ),
        usage="""
        maestro [options] -- <profile_cmd>

        Example:
        # Run maestro to optimize bank conflicts in a HIP app
        maestro -s ~/rocBLAS/build.sh -f bankConflict -- ~/rocBLAS/build/bin/rocblas_gemm
        # Run maestro to diagnose a Triton app
        maestro -- python3 gemm.py
        """,
    )
    parser.add_argument('-v', '--verbose', action='count', default=0, help='Increase verbosity level (e.g., -v, -vv, -vvv).')
    # Required arguments group
    required_args = parser.add_argument_group('required arguments')
    required_args.add_argument('remaining', metavar="-- [ ...]", nargs=argparse.REMAINDER, help='Provide the command to launch the application.')

    # Optional arguments group
    optional_args = parser.add_argument_group('optional arguments')
    optional_args.add_argument('-b', '--build_command', 
                               type=str, 
                               metavar='',
                               help='A command to build your application')
    optional_args.add_argument('-i', '--instrument_command', 
                               type=str, 
                               metavar='',
                               help='A command to instrument your application')
    
    optional_args.add_argument('-f', 
                               '--formula', 
                               choices=['bankConflict', 'memoryAccess', 'atomicContention', 'diagnoseOnly'], 
                               default='diagnoseOnly', 
                               metavar='',
                               type=str, 
                               help='Specify the formula to use for optimization (default: diagnoseOnly)')
    optional_args.add_argument("-o", 
                               "--output_file", 
                               type=str, 
                               metavar='',
                               help="Path to the output file")
    optional_args.add_argument("-c", 
                               "--ci_output_file", 
                               type=str, 
                               metavar='',
                               help="Path to the output file for CI integration")
    optional_args.add_argument('--top-n',
                               type=int, 
                               default=10,
                               metavar='',
                               help='Control the top-n kernels collected in diagnoseOnly mode (default: 10)')

    args = parser.parse_args()
    return args

def main():
    logging.raiseExceptions = True
    args = maestro_parser()
    # Generate a name for the Maestro run using timestamp
    generated_name = datetime.now().strftime("%Y_%m_%d-%H_%M_%S")
    # Set logging level based on verbosity
    if args.verbose == 1:
        logging.basicConfig(level=logging.INFO, format="[MAESTRO] %(levelname)s: %(message)s")
    elif args.verbose == 2:
        logging.basicConfig(level=logging.DEBUG, format="[MAESTRO] %(levelname)s: %(message)s")
    elif args.verbose >= 3:
        logging.basicConfig(level=logging.NOTSET, format="[MAESTRO] %(levelname)s: %(message)s")
    else:
        logging.basicConfig(level=logging.WARNING, format="[MAESTRO] %(levelname)s: %(message)s")

    # Create an optimizer based on available Maestro formulas.
    if args.formula == 'bankConflict':
        formula = bank_conflict
    elif args.formula == 'diagnoseOnly':
        formula = diagnose_only
    elif args.formula == 'memoryAccess':
        formula = memory_access
    elif args.formula == 'atomicContention':
        formula = atomic_contention
    else:
        logging.error(f"Invalid formula specified. {args.formula} is not supported.")
        sys.exit(1)

    
    optimizer = formula(
            name=generated_name,
            build_command=args.build_command,
            instrument_command=args.instrument_command,
            app_cmd=args.remaining,
            top_n=args.top_n,
        )

    num_attempts = 1 if args.formula == 'diagnoseOnly' else 10

    # Build the application
    optimizer.build()
    
    # Profile the application and collect the results.
    optimizer.profile_pass()

    # Get source code mappings
    optimizer.source_code_pass()

    # Instrument the application based on the results.
    optimizer.instrument_pass()

    for _ in range(num_attempts):
        # Optimize the application based on insights from instrumentation.
        optimizer.optimize_pass()
        
        # Compile the new application
        success, _ = optimizer.compiler_pass()
        if not success:
            optimizer.summarize_pass()
            continue
        
        # Validate the new application
        success, _ = optimizer.validation_pass()
        if not success:
            optimizer.summarize_pass()
            continue
        
        if success:
            break



if __name__ == '__main__':
    main()
