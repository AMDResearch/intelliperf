#!/usr/bin/env python3

import argparse
import logging
from formulas.bank_conflict import bank_conflict

def maestro_parser():
    parser = argparse.ArgumentParser(
        description='Optimize the given application based on availible Maestro formulas.',
        prog="tool",
        formatter_class=lambda prog: argparse.RawTextHelpFormatter(
            prog, max_help_position=30
        ),
        usage="""
        maestro -n <workload_name> [options] -- <profile_cmd>
        
        Example:
        maestro -n rocblas_gemm -- ~/rocBLAS/build/bin/rocblas_gemm
        """,
    )
    parser.add_argument('-n', '--name', type=str, required=True, help='Assign a name to distinguish your Maestro run.')
    parser.add_argument('remaining', metavar="-- [ ...]", nargs=argparse.REMAINDER, help='Provide the command to launch the application.')
    #TODO: Support different formulas via the `-f` option?
    parser.add_argument('-f', '--formula', type=str, help='Specify the formula to use for optimization.')
    
    args = parser.parse_args()
    return args

def main():
    logging.raiseExceptions = True
    args = maestro_parser()
    # Create an optimizer based on availible Maestro formulas.
    optimizer = bank_conflict(args.name, args.remaining)
    # Profile the application and collect the results.
    df_results = optimizer.profile_pass()
    # Instrument the application based on the results.
    optimizer.instrument_pass(df_results)
    # Optimize the application based on insights from instrumentation.
    optimizer.optimize_pass()
    return


if __name__ == '__main__':
    main()